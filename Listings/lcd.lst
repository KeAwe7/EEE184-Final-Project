C51 COMPILER V9.60.7.0   LCD                                                               05/19/2024 13:29:51 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\Objects\lcd.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lcd.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\lcd.l
                    -st) TABS(2) OBJECT(.\Objects\lcd.obj)

line level    source

   1          #include "lcd.h"
   2          
   3          void Lcd1602_Delay1ms(uint c) { 
   4   1          uchar a, b;   // Declare loop counters
   5   1          for (; c > 0; c--) {   // Outer loop: Repeat 'c' times
   6   2              for (b = 199; b > 0; b--) {  // Middle loop: Repeat 199 times
   7   3                  for (a = 1; a > 0; a--);  // Inner loop: Execute once (for fine-tuning delay)
   8   3              }
   9   2          }
  10   1      }
  11          
  12          #ifndef LCD1602_4PINS  // If NOT in 4-bit mode (i.e., 8-bit mode)
  13          void LcdWriteCom(uchar com) {
  14   1          LCD1602_E = 0;      // Pull enable (E) pin low
  15   1          LCD1602_RS = 0;     // Set register select (RS) for command (0)
  16   1          LCD1602_RW = 0;     // Set read/write (RW) for write (0)
  17   1      
  18   1          LCD1602_DATAPINS = com;    // Send the command byte on the data pins
  19   1          Lcd1602_Delay1ms(1);       // Short delay for data setup time
  20   1      
  21   1          LCD1602_E = 1;      // Pulse the enable (E) pin high to initiate write
  22   1          Lcd1602_Delay1ms(5);       // Hold E high for a sufficient time
  23   1          LCD1602_E = 0;      // Pull E low to complete the write
  24   1      }
  25          #else  // If in 4-bit mode
              void LcdWriteCom(uchar com) {
                  LCD1602_E = 0;      // Pull E low
                  LCD1602_RS = 0;     // Select command mode
                  LCD1602_RW = 0;     // Select write mode
              
                  LCD1602_DATAPINS = com;    // Send high nibble of the command (doesn't need shifting)
                  Lcd1602_Delay1ms(1);       // Short delay
              
                  LCD1602_E = 1;      // Pulse E high to write high nibble
                  Lcd1602_Delay1ms(5);       // Hold E high
                  LCD1602_E = 0;      // Pull E low
              
                  LCD1602_DATAPINS = com << 4; // Shift low nibble of the command to high nibble position
                  Lcd1602_Delay1ms(1);       // Short delay
              
                  LCD1602_E = 1;      // Pulse E high to write low nibble
                  Lcd1602_Delay1ms(5);       // Hold E high
                  LCD1602_E = 0;      // Pull E low
              }
              #endif 
  46          
  47          #ifndef LCD1602_4PINS  // If NOT in 4-bit mode (i.e., 8-bit mode)
  48          void LcdWriteData(uchar dat) { 
  49   1          LCD1602_E = 0;      // Pull E low
  50   1          LCD1602_RS = 1;     // Set RS for data (1)
  51   1          LCD1602_RW = 0;     // Set RW for write (0)
  52   1          
  53   1          LCD1602_DATAPINS = dat;    // Send the data byte
  54   1          Lcd1602_Delay1ms(1);       // Short delay
C51 COMPILER V9.60.7.0   LCD                                                               05/19/2024 13:29:51 PAGE 2   

  55   1      
  56   1          LCD1602_E = 1;      // Pulse E high to initiate write
  57   1          Lcd1602_Delay1ms(5);       // Hold E high
  58   1          LCD1602_E = 0;      // Pull E low
  59   1      }
  60          #else // If in 4-bit mode
              void LcdWriteData(uchar dat) {
                 // Same as LcdWriteCom, but with LCD1602_RS = 1 (data mode) 
                 // (code omitted for brevity, since it's identical to LcdWriteCom's 4-bit mode)
                  LCD1602_E = 0;      // Pull E low
                  LCD1602_RS = 1;     // Select command mode
                  LCD1602_RW = 0;     // Select write mode
              
                  LCD1602_DATAPINS = dat;    // Send high nibble of the command (doesn't need shifting)
                  Lcd1602_Delay1ms(1);       // Short delay
              
                  LCD1602_E = 1;      // Pulse E high to write high nibble
                  Lcd1602_Delay1ms(5);       // Hold E high
                  LCD1602_E = 0;      // Pull E low
              
                  LCD1602_DATAPINS = dat << 4; // Shift low nibble of the command to high nibble position
                  Lcd1602_Delay1ms(1);       // Short delay
              
                  LCD1602_E = 1;      // Pulse E high to write low nibble
                  Lcd1602_Delay1ms(5);       // Hold E high
                  LCD1602_E = 0;      // Pull E low
              }
              #endif
  83          
  84          #ifndef LCD1602_4PINS  // If NOT in 4-bit mode (i.e., 8-bit mode)
  85          void LcdInit() {
  86   1          LcdWriteCom(0x38);  // Function Set: 8-bit, 2 lines, 5x8 font
  87   1          LcdWriteCom(0x0F);  // Display on, cursor on, blink on
  88   1          LcdWriteCom(0x06);  // Entry Mode Set: Increment cursor, no shift
  89   1          LcdWriteCom(0x01);  // Clear display
  90   1          LcdWriteCom(0x80);  // Set DDRAM address to 0x00 (start of first line)
  91   1      }
  92          #else  // If in 4-bit mode
              void LcdInit() {
                  LcdWriteCom(0x32);  // Special 4-bit mode initialization
                  LcdWriteCom(0x28);  // Function Set: 4-bit, 2 lines, 5x8 font
                  LcdWriteCom(0x0F);  // Display on, cursor on, blink on
                  LcdWriteCom(0x06);  // Entry Mode Set: Increment cursor, no shift
                  LcdWriteCom(0x01);  // Clear display
                  LcdWriteCom(0x80);  // Set DDRAM address to 0x00 (start of first line)
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     87    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
